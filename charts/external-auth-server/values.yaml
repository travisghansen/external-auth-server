# Default values for external-auth-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

configTokenSignSecret:
configTokenEncryptSecret:
configTokenEncryptIVSecret:
issuerSignSecret:
issuerEncryptSecret:
cookieSignSecret:
cookieEncryptSecret:
sessionEncryptSecret:
storeOpts: {}
configTokenStores: {}
configTokens: {}
revokedJtis: []
backchannelLogoutConfig: {}

# exmaple config_token store (server-side config_tokens) setup using env variable backing
# in the example below the `config_token_id` would be "1", "2", etc
# and the `config_token_store_id` would be "primary" for the `config_token` created for the
# reverse proxy
#
#configTokenStores:
#  primary:
#    adapter: env
#    options:
#      cache_ttl: 3600
#      var: EAS_CONFIG_TOKENS
#
#configTokens:
#  1: encrypted config_token (NOT URL encoded)
#  2: ...
#  ...

# set the logging level
# WARN: debug or above will log secrets
#
# error, warn, info, verbose, debug, silly
logLevel: "info"

nodeExtraCaCerts:
#nodeExtraCaCerts: |-
#  -----BEGIN CERTIFICATE-----
#  ...
#  -----END CERTIFICATE-----
#  -----BEGIN CERTIFICATE-----
#  ...
#  -----END CERTIFICATE-----

replicaCount: 1

## Add support for Prometheus
monitoring:
  enabled: true
  serviceMonitor:
    # When set true and if Prometheus Operator is installed then use a ServiceMonitor to configure scraping
    enabled: true
    # Set the namespace the ServiceMonitor should be deployed
    # namespace: monitoring
    # Set how frequently Prometheus should scrape
    # interval: 30s
    # Set path to beats-exporter telemtery-path
    # telemetryPath: /metrics
    # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
    # labels:

image:
  repository: travisghansen/external-auth-server
  tag: latest
  #pullPolicy: IfNotPresent

# When it is not possible to access public container registry and it is required to be deployed from private
# container registry. When kubernetes.io/dockerconfigjson secret is present it can be used to pull a private image.
# Usage: -- set imagePullSecrets[0].name=private-container-credentials-secret-name
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

# NODE_OPTIONS=--max-http-header-size=61440
# EAS_SSL_KEY="/path/to/ssl/key"
# EAS_SSL_CERT="/path/to/ssl/cert"
# EAS_GRPC_SSL_KEY="/path/to/ssl/key"
# EAS_GRPC_SSL_CERT="/path/to/ssl/cert"
env: {}
#  FOO:
#    value: "bar"
#  BAR:
#    value: "baz"

extraVolumes: []
extraVolumeMounts: []

service:
  type: ClusterIP
  port: 80
  grpcPort: 50051
  annotations:
    {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# https://github.com/helm/charts/tree/master/stable/redis-ha
redis-ha:
  enabled: false
  # highly recommended to set auth and redisPassword (must set both simultaneously)
  auth: false
  redisPassword:
  exporter:
    enabled: true
  hardAntiAffinity: true # set to false for development environments with less than 3 nodes available

# sample storeOpts when using redis-ha chart
#storeOpts:
#  store: ioredis
#  password: <set to `redisPassword` value from above>
#  name: mymaster
#  keyPrefix: "eas:"
#  sentinels:
#  - host: eas-redis-ha-announce-0
#    port: 26379
#  - host: eas-redis-ha-announce-1
#    port: 26379
#  - host: eas-redis-ha-announce-2
#    port: 26379

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Additional pod labels
# https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Additional pod annotations
# https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# Priority indicates the importance of a Pod relative to other Pods.
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
priorityClassName: ""

securityContext:
  enabled: false
  fsGroup: 1001
  runAsUser: 1001
